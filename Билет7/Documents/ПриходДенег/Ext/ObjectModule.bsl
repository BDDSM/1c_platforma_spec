
Процедура ОбработкаПроведения(Отказ, Режим)

	// регистр Управленческий 
	Движения.Управленческий.Записывать = Истина;
	Движения.Управленческий.Записать();
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УправленческийОстатки.Субконто1 КАК Субконто1,
		|	УправленческийОстатки.Субконто2 КАК Договор,
		|	УправленческийОстатки.Субконто3 КАК ДокументОтгрузки,
		|	УправленческийОстатки.СуммаОстаток КАК СуммаОстаток,
		|	УправленческийОстатки.СуммаEURОстаток КАК СуммаEURОстаток
		|ИЗ
		|	РегистрБухгалтерии.Управленческий.Остатки(&МоментВремени, Счет = &СчетПокупатели, &МасСубконто, Субконто1 = &Контрагент) КАК УправленческийОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	УправленческийОстатки.Субконто2.ДатаОкончания,
		|	УправленческийОстатки.Субконто3.МоментВремени
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	ОБЩИЕ";
	МасСубконто = Новый Массив;
	МасСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагент);
	МасСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Договор);
	МасСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ДокументОтгрузки);
	Запрос.УстановитьПараметр("МасСубконто", МасСубконто);
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("СчетПокупатели", ПланыСчетов.Управленческий.Покупатели);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Введённая сумма: %1 превышает долг по контрагенту: %2 на сумму %3", 
			СуммаПоДокументу, 0, СуммаПоДокументу);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();		// Общий итог
	
	Если СуммаПоДокументу > ВыборкаОбщийИтог.СуммаОстаток Тогда
		
		НеХватает = СуммаПоДокументу - ВыборкаОбщийИтог.СуммаОстаток;
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Введённая сумма: %1 превыешает долг по контрагенту: %2 на сумму %3", 
			СуммаПоДокументу, ВыборкаОбщийИтог.СуммаОстаток, НеХватает);
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	
	ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
	
	ИтогоСписать = СуммаПоДокументу;
	
	Пока ИтогоСписать > 0 И ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СуммаСписания = МИН(ИтогоСписать, ВыборкаДетальныеЗаписи.СуммаОстаток);
		ИтогоСписать = ИтогоСписать - СуммаСписания;
		
		СуммаСписанияEUR = ?(КурсEUR = 0, 0, СуммаСписания / КурсEUR);
		СуммаСписанияEUR = МИН(СуммаСписанияEUR, ВыборкаДетальныеЗаписи.СуммаEURОстаток);
		// чтобы не допустить превышения суммы по евро...
		// в требования сказано, что допустить отрицательные остатки можно только если об этом ПРЯМО сказано в задании
		
		Движение = Движения.Управленческий.Добавить();
		Движение.СчетДт = ПланыСчетов.Управленческий.Касса;
		Движение.СчетКт = ПланыСчетов.Управленческий.Покупатели;
		Движение.Период = Дата;
		Движение.Сумма = СуммаСписания;
		Движение.СуммаEURКт = СуммаСписанияEUR;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Контрагент] = Контрагент;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Договор] = ВыборкаДетальныеЗаписи.Договор;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.ДокументОтгрузки] = ВыборкаДетальныеЗаписи.ДокументОтгрузки;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	
	
	
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
КонецПроцедуры
