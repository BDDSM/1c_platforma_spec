
Процедура ОбработкаПроведения(Отказ, Режим)
	
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика.МетодСписания) Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задана учетная политика!";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОбработкаПроведенияОУ(Отказ, Режим);
	
	Движения.Управленческий.Записывать = Истина;
	Движения.Управленческий.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.Товары);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СписокНоменклатуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура, "Номенклатура");
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладнаяСписокНоменклатуры.Номенклатура КАК Номенклатура,
		|	СУММА(РасходнаяНакладнаяСписокНоменклатуры.Количество) КАК Количество,
		|	СУММА(РасходнаяНакладнаяСписокНоменклатуры.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТ_ДанныеДок
		|ИЗ
		|	Документ.РасходнаяНакладная.СписокНоменклатуры КАК РасходнаяНакладнаяСписокНоменклатуры
		|ГДЕ
		|	РасходнаяНакладнаяСписокНоменклатуры.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасходнаяНакладнаяСписокНоменклатуры.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеДок.Номенклатура КАК Номенклатура,
		|	ВТ_ДанныеДок.Номенклатура.Представление КАК НоменклатураПредставление,
		|	ВТ_ДанныеДок.Количество КАК Количество,
		|	ВТ_ДанныеДок.Сумма КАК Сумма,
		|	УправленческийОстатки.Субконто2 КАК Партия,
		|	ЕСТЬNULL(УправленческийОстатки.КоличествоОстаток, 0) КАК КоличествоПартии,
		|	ЕСТЬNULL(УправленческийОстатки.СуммаОстаток, 0) КАК СуммаПартии
		|ИЗ
		|	ВТ_ДанныеДок КАК ВТ_ДанныеДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
		|				&МоментВремени,
		|				Счет = &СчетТовары,
		|				&НоменклатураПартияИспорчен,
		|				Субконто1 В
		|						(ВЫБРАТЬ
		|							ВТ_ДанныеДок.Номенклатура КАК Номенклатура
		|						ИЗ
		|							ВТ_ДанныеДок КАК ВТ_ДанныеДок)
		|					И Субконто3 = ЛОЖЬ) КАК УправленческийОстатки
		|		ПО ВТ_ДанныеДок.Номенклатура = УправленческийОстатки.Субконто1
		|
		|УПОРЯДОЧИТЬ ПО
		|	УправленческийОстатки.Субконто2.МоментВремени УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	СУММА(КоличествоПартии)
		|ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	НоменклатураПартияИспорчен = Новый Массив;
	НоменклатураПартияИспорчен.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	НоменклатураПартияИспорчен.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Партия);
	НоменклатураПартияИспорчен.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Испорчен);
	Запрос.УстановитьПараметр("НоменклатураПартияИспорчен", НоменклатураПартияИспорчен);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СчетТовары", ПланыСчетов.Управленческий.Товары);
	
	Если УчетнаяПолитика.МетодСписания = Перечисления.УчетнаяПолитика.ФИФО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".МоментВремени УБЫВ", ".МоментВремени ВОЗР");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		НеХватает = ВыборкаНоменклатура.Количество - ВыборкаНоменклатура.КоличествоПартии;
		Если НеХватает > 0 Тогда
		
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Не хватает годного товара %1 в количестве %2", ВыборкаНоменклатура.НоменклатураПредставление, НеХватает);
			Сообщение.Сообщить();
			
		КонецЕсли;
		
		Если Отказ Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = ВыборкаНоменклатура.Выбрать();
	    ИтогоСписать = ВыборкаНоменклатура.Количество;
		Пока ИтогоСписать > 0 И ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СписатьПоПартии = МИН(ИтогоСписать, ВыборкаДетальныеЗаписи.КоличествоПартии); 
			ИтогоСписать = ИтогоСписать - СписатьПоПартии;
			Себестоимость = СписатьПоПартии / ВыборкаДетальныеЗаписи.КоличествоПартии * ВыборкаДетальныеЗаписи.СуммаПартии; 
			
			Движение = Движения.Управленческий.Добавить();
			Движение.СчетДт = ПланыСчетов.Управленческий.ПрибылиУбытки;
			Движение.СчетКт = ПланыСчетов.Управленческий.Товары;
			Движение.Период = Дата;
			Движение.Сумма = Себестоимость;
			Движение.КоличествоКт = СписатьПоПартии;
			Движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ВыборкаДетальныеЗаписи.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Партия] = ВыборкаДетальныеЗаписи.Партия;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ВыборкаДетальныеЗаписи.Номенклатура;
			Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Испорчен] = Ложь;
			
		КонецЦикла;
		
		Движение = Движения.Управленческий.Добавить();
		Движение.СчетДт = ПланыСчетов.Управленческий.Покупатели;
		Движение.СчетКт = ПланыСчетов.Управленческий.ПрибылиУбытки;
		Движение.Период = Дата;
		Движение.Сумма = ВыборкаНоменклатура.Сумма;
		Движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = ВыборкаНоменклатура.Номенклатура;
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр Управленческий 
	Для Каждого ТекСтрокаСписокНоменклатуры Из СписокНоменклатуры Цикл
	КонецЦикла;

	// регистр Управленческий 
	Движения.Управленческий.Записывать = Истина;
	Для Каждого ТекСтрокаСписокНоменклатуры Из СписокНоменклатуры Цикл
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
КонецПроцедуры

Процедура ОбработкаПроведенияОУ(Отказ, Режим)
	
	// регистр Взаиморасчеты Приход
	Движения.Взаиморасчеты.Записывать = Истина;
	
	Движение = Движения.Взаиморасчеты.Добавить();
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Документ = Ссылка;
	Движение.Сумма = СуммаПоДокументу;

	Движения.Взаиморасчеты.БлокироватьДляИзменения = Истина;
	
	Движения.Взаиморасчеты.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОстатки.Документ КАК Документ,
	|	ВзаиморасчетыОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ВзаиморасчетыОстатки.Документ.Дата КАК ДокументДата,
	|	ВзаиморасчетыОстатки.Контрагент.СрокКредита КАК КонтрагентСрокКредита,
	|	ВзаиморасчетыОстатки.Контрагент.СуммаКредита КАК КонтрагентСуммаКредита
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Остатки(&МоментВремени, Контрагент = &Контрагент) КАК ВзаиморасчетыОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыОстатки.Документ.МоментВремени
	|ИТОГИ
	|	СУММА(СуммаОстаток),
	|	СУММА(КонтрагентСуммаКредита)
	|ПО
	|	ОБЩИЕ";
	
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОбщийИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаОбщийИтог.Следующий();
	
	ТекущаяСуммаКредита = ВыборкаОбщийИтог.СуммаОстаток;
	
	ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ЧислоСекундВСутках = 86400;
	
	ТекущийСрокКредита = (НачалоДня(Дата) - НачалоДня(ВыборкаДетальныеЗаписи.ДокументДата)) / ЧислоСекундВСутках;
	
	Если ВыборкаДетальныеЗаписи.КонтрагентСрокКредита <> 0
		И ВыборкаДетальныеЗаписи.КонтрагентСрокКредита < ТекущийСрокКредита Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Превышен срок кредита по контрагенту";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.КонтрагентСуммаКредита <> 0
		И ВыборкаДетальныеЗаписи.КонтрагентСуммаКредита < ТекущийСрокКредита Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Превышена сумма кредита по контрагенту";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры
